{
  "name": "ideaforge-backend",
  "version": "0.0.1",
  "description": "Ideaforge backend application",
  "author": "Barkas LLC",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "seed:all": "node prisma/seeders/index.js --up",
    "seed:undo:all": "node prisma/seeders/index.js --down",
    "prisma:init": "[ -z \"$(pnpm list --global prisma)\" ] && pnpm install --global prisma || :",
    "dotenv:cli:init": "[ -z \"$(pnpm list --global dotenv-cli)\" ] && pnpm install --global dotenv-cli || :",
    "seed:all:development": "pnpm run dotenv:cli:init && dotenv -e ./env/.env.development -- pnpm run seed:all",
    "seed:undo:all:development": "pnpm run dotenv:cli:init && dotenv -e ./env/.env.development -- pnpm run seed:undo:all",
    "seed:redo:all:development": "pnpm run dotenv:cli:init && dotenv -e ./env/.env.development -- pnpm run seed:undo:all && pnpm run seed:all",
    "seed:all:production": "pnpm run dotenv:cli:init && dotenv -e ./env/.env.production -- pnpm run seed:all",
    "seed:undo:all:production": "pnpm run dotenv:cli:init && dotenv -e ./env/.env.production -- pnpm run seed:undo:all",
    "seed:redo:all:production": "pnpm run dotenv:cli:init && dotenv -e ./env/.env.production -- pnpm run seed:undo:all && pnpm run seed:all",
    "seed:all:docker": "docker exec -it ideaforge-backend pnpm run seed:all",
    "seed:undo:all:docker": "docker exec -it ideaforge-backend pnpm run seed:undo:all",
    "seed:redo:all:docker": "docker exec -it ideaforge-backend pnpm run seed:undo:all && pnpm run seed:all",
    "seed:create": "node prisma/seeders/index.js --create ${npm_config_name} && sudo chmod -R 777 prisma/seeders/",
    "database:migrate:docker:production": "docker exec -it ideaforge-backend npx prisma migrate deploy && npx prisma generate",
    "database:migrate:docker:development": "docker exec -it ideaforge-backend npx prisma migrate dev && npx prisma generate",
    "database:migrate:undo:all:docker": "docker exec -it ideaforge-backend rm -rf prisma/migrations/* && npx prisma generate",
    "database:pull:docker": "docker exec -it ideaforge-backend npx prisma db pull",
    "database:push:docker": "docker exec -it ideaforge-backend npx prisma db push",
    "database:migrate:undo:all": "rm -rf prisma/migrations/* && npx prisma generate",
    "database:migrate:development": "pnpm run prisma:init && pnpm run dotenv:cli:init && dotenv -e ./env/.env.development -- prisma migrate dev",
    "database:pull:development": "pnpm run prisma:init && pnpm run dotenv:cli:init && dotenv -e ./env/.env.development -- prisma db pull",
    "database:push:development": "pnpm run prisma:init && pnpm run dotenv:cli:init && dotenv -e ./env/.env.development -- prisma db push",
    "database:migrate:production": "pnpm run prisma:init && pnpm run dotenv:cli:init && dotenv -e ./env/.env.production -- prisma migrate deploy",
    "database:pull:production": "pnpm run prisma:init && pnpm run dotenv:cli:init && dotenv -e ./env/.env.production -- prisma db pull",
    "database:push:production": "pnpm run prisma:init && pnpm run dotenv:cli:init && dotenv -e ./env/.env.production -- prisma db push",
    "start:build:docker:development": "docker compose --env-file=./env/.env.development -f docker-compose.development.yml up --build -d",
    "build:docker:development": "docker compose --env-file=./env/.env.development -f docker-compose.development.yml build --no-cache",
    "start:docker:development": "docker compose --env-file=./env/.env.development -f docker-compose.development.yml up -d",
    "stop:docker:development": "docker compose --env-file=./env/.env.development -f docker-compose.development.yml down",
    "start:build:docker:production": "docker compose --env-file=./env/.env.production -f docker-compose.production.yml up --build -d",
    "build:docker:production": "docker compose --env-file=./env/.env.production -f docker-compose.production.yml build --no-cache",
    "start:docker:production": "docker compose --env-file=./env/.env.production -f docker-compose.production.yml up -d",
    "stop:docker:production": "docker compose --env-file=./env/.env.production -f docker-compose.production.yml down"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/jwt": "^10.2.0",
    "@nestjs/passport": "^10.0.3",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/swagger": "^7.4.2",
    "@prisma/client": "^5.19.1",
    "bcrypt": "^5.1.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "cookie-parser": "^1.4.6",
    "googleapis": "^144.0.0",
    "lodash": "^4.17.21",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "qs": "^6.13.0",
    "reflect-metadata": "^0.2.0",
    "rxjs": "^7.8.1"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/bcrypt": "^5.0.2",
    "@types/cookie-parser": "^1.4.7",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/lodash": "^4.17.7",
    "@types/node": "^20.3.1",
    "@types/passport-jwt": "^4.0.1",
    "@types/passport-local": "^1.0.38",
    "@types/qs": "^6.9.16",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "prisma": "^5.19.1",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
